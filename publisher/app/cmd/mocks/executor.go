// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// ExecutorMock is a mock implementation of cmd.Executor.
//
//	func TestSomethingThatUsesExecutor(t *testing.T) {
//
//		// make and configure a mocked cmd.Executor
//		mockedExecutor := &ExecutorMock{
//			RunFunc: func(cmd string, params ...string)  {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedExecutor in code that requires cmd.Executor
//		// and then make assertions.
//
//	}
type ExecutorMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(cmd string, params ...string)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Cmd is the cmd argument value.
			Cmd string
			// Params is the params argument value.
			Params []string
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *ExecutorMock) Run(cmd string, params ...string) {
	if mock.RunFunc == nil {
		panic("ExecutorMock.RunFunc: method is nil but Executor.Run was just called")
	}
	callInfo := struct {
		Cmd    string
		Params []string
	}{
		Cmd:    cmd,
		Params: params,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc(cmd, params...)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedExecutor.RunCalls())
func (mock *ExecutorMock) RunCalls() []struct {
	Cmd    string
	Params []string
} {
	var calls []struct {
		Cmd    string
		Params []string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// ResetRunCalls reset all the calls that were made to Run.
func (mock *ExecutorMock) ResetRunCalls() {
	mock.lockRun.Lock()
	mock.calls.Run = nil
	mock.lockRun.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *ExecutorMock) ResetCalls() {
	mock.lockRun.Lock()
	mock.calls.Run = nil
	mock.lockRun.Unlock()
}
